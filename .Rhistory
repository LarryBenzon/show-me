"MZS SANTIAGO CENTRO PONIENTE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("\"ARICA\"",
"ARICA",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("\"PUNTA ARENAS\"",
"PUNTA ARENAS",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("\"IQUIQUE\"",
"IQUIQUE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("VALDIVIA ",
"VALDIVIA",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("CONCEPCION  ",
"CONCEPCION",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("\"ANTOFAGASTA\"",
"ANTOFAGASTA",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("INTALACIONES",
"INSTALACIONES",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("C.O.E",
"COE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("V DIVISION DE EJERCITO",
"V DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("V DIVISION",
"V DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("V DIVISION DE EJERCITO",
"V DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("V DIVISION",
"V DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("VI DIVISION DE EJERCITO",
"VI DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("VI DIVISION",
"VI DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("SEXTA DIVISION",
"VI DE",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub(" SCCM CHILLAN",
"SCCM CHILLAN",
direccion),
NA_character_))%>%
mutate(direccion = ifelse(!is.na(direccion),
gsub("HOSPITAL MILITAR DE SANTIAGO(HOSPITAL MILITAR DE SANTIAGO)",
"HOSPITAL MILITAR DE SANTIAGO",
direccion),
NA_character_))%>%
separate(direccion,into = c("col1", "col2", "col3",'col4', 'col5', 'col6', 'col7', 'col8', 'col9') ,sep = ";" , remove = FALSE)
df <- data.frame(lapply(df, as.factor))
shiny::runApp('dpeApi')
View(procesar_datos)
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
source("C:/Users/User/OneDrive/el arca/Aplicativo/dpeApi/app.R")
runApp('dpeApi')
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
library(readxl)
library(dplyr)
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx" # Cambia esta ruta al segundo archivo Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1_limpios <- eliminar_columnas_vacias(datos1)
datos2_limpios <- eliminar_columnas_vacias(datos2)
View(datos1_limpios)
head(datos1_limpios)
head(datos2_limpios)
datos_joined <- inner_join(datos1_limpios, datos2_limpios, by = "ID")
View(datos_joined)
head(datos_joined)
library(readxl)
library(dplyr)
# Especificar las rutas de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx" # Cambia esta ruta al segundo archivo Excel
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1_limpios <- eliminar_columnas_vacias(datos1)
datos2_limpios <- eliminar_columnas_vacias(datos2)
View(datos2)
View(datos2)
View(datos2)
datos_joined <- inner_join(datos1_limpios, datos2_limpios, by = "ID")
View(datos_joined)
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/EMGE (1-511) 12JUL2023.xlsx" # Cambia esta ruta al segundo archivo Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
View(datos1)
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1_limpios <- eliminar_columnas_vacias(datos1)
datos2_limpios <- eliminar_columnas_vacias(datos2)
datos_joined <- inner_join(datos1_limpios, datos2_limpios, by = "ID")
# Cargar el paquete readxl
library(readxl)
# Especificar la ruta del archivo Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx" # Supongamos que tienes otro archivo D2.xlsx
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx" # Supongamos que tienes otro archivo D2.xlsx
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1_limpios <- eliminar_columnas_vacias(datos1)
datos2_limpios <- eliminar_columnas_vacias(datos2)
datos_comb <- rbind(datos1_limpios, datos2_limpios)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
sumar_respuestas <- function(df1, df2) {
common_cols <- intersect(names(df1), names(df2))
unique_cols_df1 <- setdiff(names(df1), common_cols)
unique_cols_df2 <- setdiff(names(df2), common_cols)
# Crear un nuevo dataframe para almacenar los resultados
resultado <- data.frame(matrix(ncol = length(common_cols) + length(unique_cols_df1) + length(unique_cols_df2), nrow = nrow(df1)))
names(resultado) <- c(common_cols, unique_cols_df1, unique_cols_df2)
# Sumar las columnas comunes
for (col in common_cols) {
resultado[[col]] <- rowSums(cbind(df1[[col]], df2[[col]]), na.rm = TRUE)
}
# Copiar las columnas únicas de cada dataframe
for (col in unique_cols_df1) {
resultado[[col]] <- df1[[col]]
}
for (col in unique_cols_df2) {
resultado[[col]] <- df2[[col]]
}
return(resultado)
}
# Aplicar la función para sumar respuestas
datos_comb_sumados <- sumar_respuestas(datos1, datos2)
View(datos_comb)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/EMGE (1-511) 12JUL2023.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/EMGE (1-511) 12JUL2023.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
View(datos_comb)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/EMGE (1-511) 12JUL2023.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Realizar una unión completa de los dataframes
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
# Sumar las respuestas de las columnas coincidentes
# Se asume que las columnas coincidentes contienen datos numéricos
sumar_respuestas <- function(df1, df2) {
common_cols <- intersect(names(df1), names(df2))
unique_cols_df1 <- setdiff(names(df1), common_cols)
unique_cols_df2 <- setdiff(names(df2), common_cols)
# Crear un nuevo dataframe para almacenar los resultados
resultado <- data.frame(matrix(ncol = length(common_cols) + length(unique_cols_df1) + length(unique_cols_df2), nrow = nrow(df1)))
names(resultado) <- c(common_cols, unique_cols_df1, unique_cols_df2)
# Sumar las columnas comunes
for (col in common_cols) {
resultado[[col]] <- rowSums(cbind(df1[[col]], df2[[col]]), na.rm = TRUE)
}
# Copiar las columnas únicas de cada dataframe
for (col in unique_cols_df1) {
resultado[[col]] <- df1[[col]]
}
for (col in unique_cols_df2) {
resultado[[col]] <- df2[[col]]
}
return(resultado)
}
# Aplicar la función para sumar respuestas
datos_comb_sumados <- sumar_respuestas(datos1, datos2)
# Copiar las columnas únicas de cada dataframe
for (col in unique_cols_df1) {
resultado[[col]] <- df1[[col]]
}
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Convertir las columnas comunes a numéricas y manejar filas faltantes
convert_to_numeric_and_extend <- function(df, cols, nrows) {
for (col in cols) {
if (!is.numeric(df[[col]])) {
df[[col]] <- as.numeric(as.character(df[[col]]))
}
}
if (nrow(df) < nrows) {
for (col in names(df)) {
df[[col]] <- c(df[[col]], rep(NA, nrows - nrow(df)))
}
}
return(df)
}
# Obtener el número máximo de filas entre ambos dataframes
max_rows <- max(nrow(datos1), nrow(datos2))
# Asegurarse de que las columnas comunes sean numéricas y extender filas si es necesario
common_cols <- intersect(names(datos1), names(datos2))
datos1 <- convert_to_numeric_and_extend(datos1, common_cols, max_rows)
datos2 <- convert_to_numeric_and_extend(datos2, common_cols, max_rows)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Realizar una unión completa de los dataframes
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
View(datos_comb)
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Convertir las columnas comunes a numéricas y manejar filas faltantes
convert_to_numeric_and_extend <- function(df, cols, nrows) {
for (col in cols) {
if (!is.numeric(df[[col]])) {
df[[col]] <- as.numeric(as.character(df[[col]]))
}
}
# Extender el dataframe agregando filas con NA si es necesario
if (nrow(df) < nrows) {
df[(nrow(df) + 1):nrows, ] <- NA
}
return(df)
}
# Obtener el número máximo de filas entre ambos dataframes
max_rows <- max(nrow(datos1), nrow(datos2))
# Asegurarse de que las columnas comunes sean numéricas y extender filas si es necesario
common_cols <- intersect(names(datos1), names(datos2))
datos1 <- convert_to_numeric_and_extend(datos1, common_cols, max_rows)
datos2 <- convert_to_numeric_and_extend(datos2, common_cols, max_rows)
# Realizar una unión completa de los dataframes
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
# Sumar las respuestas de las columnas coincidentes
sumar_respuestas <- function(df1, df2) {
common_cols <- intersect(names(df1), names(df2))
unique_cols_df1 <- setdiff(names(df1), common_cols)
unique_cols_df2 <- setdiff(names(df2), common_cols)
# Crear un nuevo dataframe para almacenar los resultados
resultado <- data.frame(matrix(ncol = length(common_cols) + length(unique_cols_df1) + length(unique_cols_df2), nrow = max(nrow(df1), nrow(df2))))
names(resultado) <- c(common_cols, unique_cols_df1, unique_cols_df2)
# Sumar las columnas comunes
for (col in common_cols) {
resultado[[col]] <- rowSums(cbind(df1[[col]], df2[[col]]), na.rm = TRUE)
}
# Copiar las columnas únicas de cada dataframe
for (col in unique_cols_df1) {
resultado[[col]] <- df1[[col]]
}
for (col in unique_cols_df2) {
resultado[[col]] <- df2[[col]]
}
return(resultado)
}
# Aplicar la función para sumar respuestas
datos_comb_sumados <- sumar_respuestas(datos1, datos2)
# Mostrar las primeras filas del dataframe combinado y sumado
head(datos_comb_sumados)
View(datos_comb)
View(datos_comb)
# Realizar una unión completa de los dataframes
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
# Cargar los paquetes necesarios
library(readxl)
library(dplyr)
# Especificar la ruta de los archivos Excel
ruta_archivo1 <- "C:/Users/User/OneDrive/el arca/datos/D1.xlsx"
ruta_archivo2 <- "C:/Users/User/OneDrive/el arca/datos/D2.xlsx"
# Leer los archivos Excel
datos1 <- read_excel(ruta_archivo1)
datos2 <- read_excel(ruta_archivo2)
# Eliminar columnas vacías en ambos dataframes
eliminar_columnas_vacias <- function(dataframe) {
dataframe[, colSums(is.na(dataframe)) < nrow(dataframe)]
}
datos1 <- eliminar_columnas_vacias(datos1)
datos2 <- eliminar_columnas_vacias(datos2)
# Realizar una unión completa de los dataframes
datos_comb <- full_join(datos1, datos2, by = intersect(names(datos1), names(datos2)))
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
install.packages("shiny")
install.packages("shinydashboard")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("shinyBS")
install.packages("shinyjs")
install.packages("readxl")
install.packages("writexl")
install.packages("shinyFiles")
install.packages("fs")
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
shiny::runApp('dpeApi')
shiny::runApp('dpeApi')
shiny::runApp('dpeApi')
shiny::runApp('dpeApi')
load("C:/Users/elgue/OneDrive/el arca/Aplicativo/.RData")
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
q()
View(procesar_datos)
View(procesar_datos)
shiny::runApp('dpeApi')
# Instalar shiny
install.packages("shiny")
# Instalar shinyjs
install.packages("shinyjs")
# Instalar shinydashboard
install.packages("shinydashboard")
# Instalar readxl
install.packages("readxl")
# Instalar dplyr
install.packages("dplyr")
# Instalar writexl
install.packages("writexl")
# Instalar shinyFiles
install.packages("shinyFiles")
# Instalar fs
install.packages("fs")
# Instalar stringdist
install.packages("stringdist")
# Instalar ggplot2
install.packages("ggplot2")
# Instalar shinyBS
install.packages("shinyBS")
shiny::runApp('dpeApi')
install.packages("stringr")
shiny::runApp('dpeApi')
runApp('dpeApi')
runApp('dpeApi')
install.packages("tidyr")
{}
install.packages("tidyr")
runApp('dpeApi')
shiny::runApp('dpeApi')
shiny::runApp('dpeApi')
shiny::runApp('dpeApi')
